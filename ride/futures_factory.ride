{-# STDLIB_VERSION 7 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let separator = "__"
let chainId = this.bytes.drop(1).take(1)
let chainIdW = base16'57'
let contractFilename = "futures_factory.ride"

func wrapErr(s: String) = {
  contractFilename + ": " + s
}

func throwErr(s: String) = {
  throw(wrapErr(s))
}

let kCalculatorAddress = "%s__calculatorAddress"
let calculatorAddressOption = match this.getString(kCalculatorAddress) {
  case s: String => s.addressFromString()
  case _: Unit => unit
}
let calculatorAddress = calculatorAddressOption.valueOrErrorMessage(wrapErr("invalid calculator address"))

let kAccountScript = "%s__accountScript"
let kRewardAmount = "%s__rewardAmount"

func mustAddress(i: Invocation, address: Address) = {
  i.caller == address || throw("permission denied")
}

func mustThis(i: Invocation) = {
  mustAddress(i, this)
}

func mustCalculator(i: Invocation) = {
  mustAddress(i, calculatorAddress)
}

let wavesString = "WAVES"
let queueItemSize = 32

func parseAssetId(input: String) = {
  if (input == wavesString) then unit else input.fromBase58String()
}

func assetIdToString(input: ByteVector|Unit) = {
  if (input == unit) then wavesString else input.value().toBase58String()
}

@Callable(i)
func init(
  calculatorAddressStr: String,
  accountScript: ByteVector,
  rewardAmount: Int
) = {
  strict checkCaller = i.mustThis()

  ([
    StringEntry(kCalculatorAddress, calculatorAddressStr),
    BinaryEntry(kAccountScript, accountScript),
    IntegerEntry(kRewardAmount, rewardAmount)
  ], unit)
}

@Callable(i)
func stringEntry(key: String, val: String) =
  if (i.mustCalculator()) then ([StringEntry(key, val)], key) else ([], unit)

@Callable(i)
func integerEntry(key: String, val: Int) =
  if (i.mustCalculator()) then ([IntegerEntry(key, val)], key) else ([], unit)

@Callable(i)
func booleanEntry(key: String, val: Boolean) =
  if (i.mustCalculator()) then ([BooleanEntry(key, val)], key) else ([], unit)

@Callable(i)
func binaryEntry(key: String, val: ByteVector) =
  if (i.mustCalculator()) then ([BinaryEntry(key, val)], key) else ([], unit)

@Callable(i)
func deleteEntry(key: String) =
  if (i.mustCalculator()) then ([DeleteEntry(key)], key) else ([], unit)

@Callable(i)
func reissue(assetId: ByteVector, amount: Int, reissuable: Boolean) = 
  if (i.mustCalculator()) then ([Reissue(assetId, amount, reissuable)], amount) else ([], unit)

@Callable(i)
func burn(assetId: ByteVector, amount: Int) = 
  if (i.mustCalculator()) then ([Burn(assetId, amount)], amount) else ([], unit)

@Callable(i)
func transferAsset(recipientBytes: ByteVector, amount: Int, assetId: ByteVector) = 
  if (i.mustCalculator()) then ([ScriptTransfer(Address(recipientBytes), amount, assetId)], amount) else ([], unit)

@Callable(i)
func transferAssets(recipientBytes: ByteVector, assetsList: List[ByteVector], amountsList: List[Int]) = {
  if (i.mustCalculator()) then {
    func addNewTransfer(acc: (List[ScriptTransfer], Int), nextAssetId: ByteVector) = {
      let (transfers, j) = acc

      let newTransfer = ScriptTransfer(
        Address(recipientBytes),
        amountsList[j],
        assetsList[j]
      )
      let updatedTransfers = transfers :+ newTransfer
      (updatedTransfers, j + 1)
    }

    let (assetsTransfers, _lastIndex) = FOLD<10>(assetsList, ([], 0), addNewTransfer)
    (assetsTransfers, unit)
  } else {
    ([], unit)
  }
}

@Callable(i)
func transferWaves(recipientBytes: ByteVector, amount: Int) = 
  if (i.mustCalculator()) then ([ScriptTransfer(Address(recipientBytes), amount, unit)], amount) else ([], unit)

@Callable(i)
func call(function: String, args: List[String]) = {
  let result = calculatorAddress.reentrantInvoke(function, [i.callerPublicKey, args], i.payments)

  (nil, result)
}
