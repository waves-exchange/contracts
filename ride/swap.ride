{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

#-----------------
# GLOBAL VARIABLES
#-----------------


let SEP = "__"

let feeScale = 100_000_000.toBigInt()

func getStringOrFail(key: String) = {this.getString(key).valueOrErrorMessage("No data for this.key=" + key)}

let poolDisabled = "Pool disabled".throw()
let poolNotExist = "Pool is not exist".throw()
let slippageTooBig = "Slippage is too big".throw()

func keyManagerPublicKey() = "%s__managerPublicKey"
func keyManagerVaultAddress() = "%s__managerVaultAddress"

func fc() = {"%s__factoryContract"}
let factoryContract = addressFromStringValue(getStringOrFail(fc()))

func protocolFee() = ["%s", "protocolFee"].makeString(SEP)
func poolFee() = ["%s", "poolFee"].makeString(SEP)

func getStringOrFailFromAddress(address: Address, key: String) = {
  address.getString(key).valueOrErrorMessage(
    makeString(["mandatory ", address.toString(), ".", key, " is not defined"], "")
  )
}

let keyFeeCollectorAddress = "%s__feeCollectorAddress"
let feeCollectorAddress = factoryContract.getStringOrFailFromAddress(keyFeeCollectorAddress).addressFromStringValue()

func getManagerVaultAddressOrThis() = {
  match keyManagerVaultAddress().getString() {
    case s:String => s.addressFromStringValue()
    case _=> this
  }
}

func asInt(val: Any) = {
  match val {
    case valInt: Int => valInt
    case _ => throw("fail to cast into Int")
  }
}

func dataMappingPoolAssets(internalAmountAssetStr: Int, internalPriceAssetStr: Int) = {
  makeString(
    ["%d%d",
    internalAmountAssetStr.toString(),
    internalPriceAssetStr.toString()],
    SEP)
}

func managerPublicKeyOrUnit() = {
  let managerVaultAddress = getManagerVaultAddressOrThis()
  match managerVaultAddress.getString(keyManagerPublicKey()) {
    case s: String => s.fromBase58String()
    case _: Unit => unit
  }
}

func isManager(i: Invocation) = {
  match managerPublicKeyOrUnit() {
    case pk: ByteVector => i.callerPublicKey == pk
    case _: Unit => i.caller == this
  }
}

func mustManager(i: Invocation) = {
  i.isManager() || "permission denied".throw()
}

func getAccBalance(assetId: String) = {
  if(assetId == "WAVES") then wavesBalance(this).available else assetBalance(this, fromBase58String(assetId))
}

# %d%d__poolFee__protocolFee
func getSwapFees(poolAddressStr: String) = {
  let poolFeeDefault = factoryContract.getIntegerValue(poolFee())
  let protocolFeeDefault = factoryContract.getIntegerValue(protocolFee())

  match factoryContract.invoke("getSwapFeeREADONLY", [poolAddressStr], []) {
    case fees: (Int, Int) => (fees._1, fees._2)
    case _ => (poolFeeDefault, protocolFeeDefault)
  }
}

func getPoolAddressAndCheckPoolStatus(
  assetIn: String,
  assetOut: String
  ) = {
  let lpNonReverse = invoke(
    factoryContract,
    "getLpAssetFromPoolAssetsREADONLY",
    [assetIn, assetOut],
    []
  ).as[String]
  let lpReverse = invoke(
    factoryContract,
    "getLpAssetFromPoolAssetsREADONLY",
    [assetOut, assetIn],
    []
  ).as[String]
  let (isReverse, pool) = if (lpNonReverse != unit) then {
    let pool = invoke(
      factoryContract,
      "getPoolAddressFromLpAssetREADONLY",
      [lpNonReverse.value()],
      []
    ).exactAs[String]
    (false, pool)
  } else if (lpReverse != unit) then {
    let pool = invoke(
      factoryContract,
      "getPoolAddressFromLpAssetREADONLY",
      [lpReverse.value()],
      []
    ).exactAs[String]
    (true, pool)
  } else {
    poolNotExist
  }
  
  let poolStatus = invoke(
    factoryContract,
    "getPoolStatusREADONLY", 
    [pool], 
    []
  ).exactAs[Int]
  strict check = poolStatus == 1 || poolDisabled # ACTIVE, pool without restrictions
  let poolAdr = addressFromStringValue(pool.valueOrElse(""))

  (poolAdr, isReverse)
}

@Callable(i)
func swapCalculateREADONLY(
  amountIn: Int,
  assetIn: String,
  assetOut: String
) = {
  let (poolAdr, isReverse) = getPoolAddressAndCheckPoolStatus(assetIn, assetOut)

  let (plFee, prFee) = getSwapFees(poolAdr.toString())
  let feeProtocolAmountCalc = fraction(amountIn.toBigInt(), prFee.toBigInt(), feeScale)
  let feePoolAmountCalc = fraction(amountIn.toBigInt(), plFee.toBigInt(), feeScale)

  let feeProtocolAmount = if (feeProtocolAmountCalc.toInt() == 0) then {
    toBigInt(1)
  } else {
    feeProtocolAmountCalc
  }
  let feePoolAmount = if (feePoolAmountCalc.toInt() == 0) then {
    toBigInt(1)
  } else {
    feePoolAmountCalc
  }
  let cleanAmountIn = amountIn.toBigInt() - feeProtocolAmount - feePoolAmount

  let res = invoke(
    poolAdr,
    "calculateAmountOutForSwapREADONLY",
    [cleanAmountIn.toInt(), isReverse, feePoolAmount.toInt()],
    []
  ).exactAs[Int]

  (nil,
  res)
}

@Callable(i)
func swap(
  amountOutMin: Int,
  assetOutRaw: String,
  addressTo: String 
) = {
  let assetOut = if (assetOutRaw == "") then "WAVES" else assetOutRaw
  let pmt = i.payments[0].value()
  let assetIn = if(pmt.assetId == unit) then "WAVES" else pmt.assetId.value().toBase58String()
  let amountIn = pmt.amount.value()
  let (poolAdr, isReverse) = getPoolAddressAndCheckPoolStatus(assetIn, assetOut)
  let (plFee, prFee) = getSwapFees(poolAdr.toString())
  let feeProtocolAmountCalc = fraction(amountIn.toBigInt(), prFee.toBigInt(), feeScale)
  let feePoolAmountCalc = fraction(amountIn.toBigInt(), plFee.toBigInt(), feeScale)

  let feeProtocolAmount = if (feeProtocolAmountCalc.toInt() == 0) then {
    toBigInt(1)
  } else {
    feeProtocolAmountCalc
  }
  let feePoolAmount = if (feePoolAmountCalc.toInt() == 0) then {
    toBigInt(1)
  } else {
    feePoolAmountCalc
  }
  let cleanAmountIn = amountIn.toBigInt() - feeProtocolAmount - feePoolAmount

  strict checks = [
    i.payments.size() == 1 || "exactly 1 payment are expected".throw()
  ]

  let assetInAttachedPayment = if (assetIn == "WAVES") then unit else assetIn.fromBase58String()

  let totalGetRaw = invoke(
    poolAdr,
    "calculateAmountOutForSwapAndSendTokens",
    [cleanAmountIn.toInt(), isReverse, amountOutMin, addressTo, feePoolAmount.toInt()],
    [AttachedPayment(assetInAttachedPayment, cleanAmountIn.toInt())]
  ).exactAs[Int]

  ([ScriptTransfer(feeCollectorAddress, feeProtocolAmount.toInt(), assetInAttachedPayment),
  ScriptTransfer(poolAdr, feePoolAmount.toInt(), assetInAttachedPayment)],
  totalGetRaw)
}

@Verifier(tx)
func verify() = {
  let targetPublicKey = match managerPublicKeyOrUnit() {
    case pk: ByteVector => pk
    case _: Unit => tx.senderPublicKey
  }
  sigVerify(tx.bodyBytes, tx.proofs[0], targetPublicKey)
}
