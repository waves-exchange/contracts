{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

#-----------------
# GLOBAL VARIABLES
#-----------------


let SEP = "__"

let feeScale = 100_000.toBigInt()

func getStringOrFail(key: String) = {this.getString(key).valueOrErrorMessage("No data for this.key=" + key)}

let poolDisabled = "Pool disabled".throw()
let poolNotExist = "Pool is not exist".throw()
let slippageTooBig = "Slippage is too big".throw()

func keyManagerPublicKey() = "%s__managerPublicKey"
func keyPendingManagerPublicKey() = "%s__pendingManagerPublicKey"

func fc() = {"%s__factoryContract"}
let factoryContract = addressFromStringValue(getStringOrFail(fc()))

func feeProtocolContractAddress() = ["%s", "feeProtocolContractAddress"].makeString(SEP)
let feeContract = addressFromStringValue(getStringOrFail(feeProtocolContractAddress()))

func protocolFee() = ["%s", "protocolFee"].makeString(SEP)
func poolFee() = ["%s", "poolFee"].makeString(SEP)



func asInt(val: Any) = {
  match val {
    case valInt: Int => valInt
    case _ => throw("fail to cast into Int")
  }
}

func dataMappingPoolAssets(internalAmountAssetStr: Int, internalPriceAssetStr: Int) = {
  makeString(
    ["%d%d",
    internalAmountAssetStr.toString(),
    internalPriceAssetStr.toString()],
    SEP)
}

func managerPublicKeyOrUnit() = match keyManagerPublicKey().getString() {
  case s: String => s.fromBase58String()
  case _: Unit => unit
}

func pendingManagerPublicKeyOrUnit() = match keyPendingManagerPublicKey().getString() {
  case s: String => s.fromBase58String()
  case _: Unit => unit
}

func isManager(i: Invocation) = {
  match managerPublicKeyOrUnit() {
    case pk: ByteVector => i.callerPublicKey == pk
    case _: Unit => i.caller == this
  }
}

func mustManager(i: Invocation) = {
  i.isManager() || "permission denied".throw()
}

func getAccBalance(assetId: String) = {
  if(assetId == "WAVES") then wavesBalance(this).available else assetBalance(this, fromBase58String(assetId))
}

@Callable(i)
func swapCalculateREADONLY(
  amountIn: Int,
  assetIn: String,
  assetOut: String
) = {
  let prFee = getInteger(protocolFee()).value()
  let feeProtocolAmountCalc = fraction(amountIn.toBigInt(), prFee.toBigInt(), feeScale)
  let plFee = getInteger(poolFee()).value()
  let feePoolAmountCalc = fraction(amountIn.toBigInt(), plFee.toBigInt(), feeScale)

  let feeProtocolAmount = if (feeProtocolAmountCalc.toInt() == 0) then {
    toBigInt(1)
  } else {
    feeProtocolAmountCalc
  }
  let feePoolAmount = if (feePoolAmountCalc.toInt() == 0) then {
    toBigInt(1)
  } else {
    feePoolAmountCalc
  }
  let cleanAmountIn = amountIn.toBigInt() - feeProtocolAmount - feePoolAmountCalc

  let lpNonReverse = invoke(
    factoryContract,
    "getLpAssetFromPoolAssetsREADONLY",
    [assetIn, assetOut],
    []
  )

  let lpReverse = invoke(
    factoryContract,
    "getLpAssetFromPoolAssetsREADONLY",
    [assetOut, assetIn],
    []
  )

  let (isReverse, pool) = if (lpNonReverse != unit) then {
    let isReverse = false
    let pool = invoke(
      factoryContract,
      "getPoolAddressFromLpAssetREADONLY",
      [lpNonReverse],
      []
    ).exactAs[String]
    (isReverse, pool)
  } else if (lpReverse != unit) then {
    let isReverse = true
    let pool = invoke(
      factoryContract,
      "getPoolAddressFromLpAssetREADONLY",
      [lpReverse],
      []
    ).exactAs[String]
    (isReverse, pool)
  } else {
    poolNotExist
  }

  let poolStatus = invoke(
    factoryContract,
    "getPoolStatusREADONLY", 
    [pool], 
    []
  ).exactAs[Int]
  strict check = poolStatus == 1 || poolDisabled
  let poolAdr = addressFromStringValue(pool.valueOrElse(""))

  let res = invoke(
    poolAdr,
    "calculateAmountOutForSwapREADONLY",
    [cleanAmountIn.toInt(), isReverse],
    []
  ).exactAs[Int]


  (nil,
  res)
}

@Callable(i)
func swap(
  amountOutMin: Int,
  assetOut: String,
  addressTo: String 
) = {
  let pmt = i.payments[0].value()
  let assetIn = if(pmt.assetId == unit) then "WAVES".toBytes() else pmt.assetId.value()
  let amountIn = pmt.amount.value()
  let prFee = getInteger(protocolFee()).value()
  let feeProtocolAmountCalc = fraction(amountIn.toBigInt(), prFee.toBigInt(), feeScale)
  let plFee = getInteger(poolFee()).value()
  let feePoolAmountCalc = fraction(amountIn.toBigInt(), plFee.toBigInt(), feeScale)

  let feeProtocolAmount = if (feeProtocolAmountCalc.toInt() == 0) then {
    toBigInt(1)
  } else {
    feeProtocolAmountCalc
  }
  let feePoolAmount = if (feePoolAmountCalc.toInt() == 0) then {
    toBigInt(1)
  } else {
    feePoolAmountCalc
  }
  let cleanAmountIn = amountIn.toBigInt() - feeProtocolAmount - feePoolAmountCalc

  strict checks = [
    i.payments.size() == 1 || "exactly 1 payment are expected".throw()
  ]

  let lpNonReverse = invoke(
    factoryContract,
    "getLpAssetFromPoolAssetsREADONLY",
    [assetIn.toBase58String(), assetOut],
    []
  ).as[String]

  let lpReverse = invoke(
    factoryContract,
    "getLpAssetFromPoolAssetsREADONLY",
    [assetOut, assetIn.toBase58String()],
    []
  ).as[String]
  let (isReverse, pool) = if (lpNonReverse != unit) then {
    let isReverse = false
    let pool = invoke(
      factoryContract,
      "getPoolAddressFromLpAssetREADONLY",
      [lpNonReverse.value()],
      []
    ).exactAs[String]
    (isReverse, pool)
  } else if (lpReverse != unit) then {
    let isReverse = true
    let pool = invoke(
      factoryContract,
      "getPoolAddressFromLpAssetREADONLY",
      [lpReverse.value()],
      []
    ).exactAs[String]
    (isReverse, pool)
  } else {
    poolNotExist
  }
  
  let poolStatus = invoke(
    factoryContract,
    "getPoolStatusREADONLY", 
    [pool], 
    []
  ).exactAs[Int]
  strict check = poolStatus == 1 || poolDisabled # ACTIVE, pool without restrictions

  let poolAdr = addressFromStringValue(pool)

  let totalGetRaw = invoke(
    poolAdr,
    "calculateAmountOutForSwapAndSendTokens",
    [cleanAmountIn.toInt(), isReverse, amountOutMin, addressTo],
    [AttachedPayment(assetIn, cleanAmountIn.toInt())]
  ).exactAs[Int]

  ([ScriptTransfer(feeContract, feeProtocolAmount.toInt(), assetIn),
  ScriptTransfer(poolAdr, feePoolAmount.toInt(), assetIn)],
  totalGetRaw)
  
}


@Callable(i)
func setManager(pendingManagerPublicKey: String) = {
  strict checkCaller = i.mustManager()
  strict checkManagerPublicKey = pendingManagerPublicKey.fromBase58String()

  [StringEntry(keyPendingManagerPublicKey(), pendingManagerPublicKey)]
}

@Callable(i)
func confirmManager() = {
  let pm = pendingManagerPublicKeyOrUnit()
  strict hasPM = pm.isDefined() || throw("no pending manager")
  strict checkPM = i.callerPublicKey == pm.value() || throw("you are not pending manager")

  [
    StringEntry(keyManagerPublicKey(), pm.value().toBase58String()),
    DeleteEntry(keyPendingManagerPublicKey())
  ]
}

@Verifier(tx)
func verify() = {
  let targetPublicKey = match managerPublicKeyOrUnit() {
    case pk: ByteVector => pk
    case _: Unit => tx.senderPublicKey
  }
  sigVerify(tx.bodyBytes, tx.proofs[0], targetPublicKey)
}
