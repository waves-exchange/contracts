{-# STDLIB_VERSION 7 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}
{-# IMPORT common.lib.ride #-}

let kFactoryPublicKey = "%s__factoryPublicKey"
let kServicePublicKey = "%s__servicePublicKey"
let kOwnerPublicKey = "%s__ownerPublicKey"
let kBotPublicKey = "%s__botPublicKey"

func kAccountAddressToAccountId(accountAddress: Address) = {
  ["%s%s", accountAddress.toString(), "accountAddressToAccountId"].makeString(separator)
}
func kAccountOwner(accountId: String) = {
  ["%s%s", accountId, "owner"].makeString(separator)
}

let factoryAddress = addressFromPublicKey(this.getBinaryValue(kFactoryPublicKey))
let serviceAddress = addressFromPublicKey(factoryAddress.getBinaryValue(kServicePublicKey))

let accountId = factoryAddress.getStringValue(kAccountAddressToAccountId(this))
let ownerPublicKey = factoryAddress.getBinaryValue(kAccountOwner(accountId))
let ownerAddress = addressFromPublicKey(ownerPublicKey)

func mustService(i: Invocation) = {
  mustAddress(i, serviceAddress)
}

func mustOwner(i: Invocation) = {
  mustAddress(i, ownerAddress)
}

@Callable(i)
func stringEntry(key: String, val: String) =
  if (i.mustService()) then ([StringEntry(key, val)], key) else ([], unit)

@Callable(i)
func integerEntry(key: String, val: Int) =
  if (i.mustService()) then ([IntegerEntry(key, val)], key) else ([], unit)

@Callable(i)
func transferAsset(recipientBytes: ByteVector, amount: Int, assetId: ByteVector) = 
  if (i.mustService()) then ([ScriptTransfer(Address(recipientBytes), amount, assetId)], amount) else ([], unit)

@Callable(i)
func transferWaves(recipientBytes: ByteVector, amount: Int) = 
  if (i.mustService()) then ([ScriptTransfer(Address(recipientBytes), amount, unit)], amount) else ([], unit)

@Callable(i)
func init(requestId: String, factoryPublicKey: ByteVector, creatorPublicKey: ByteVector) = {
  strict checkCaller = i.mustThis()

  # throws if accounts is not ok
  strict completeRequest = addressFromPublicKey(
    factoryPublicKey
  ).invoke("complete", [requestId, creatorPublicKey], [])

  ([
    BinaryEntry(kFactoryPublicKey, factoryPublicKey)
  ], unit)
}

# owner can call only this function
# service address should be replaced to change logic
@Callable(i)
func call(function: String, args: List[String]) = {
  strict checkCaller = i.mustOwner()
  let result = serviceAddress.reentrantInvoke(function, [args], i.payments)

  (nil, result)
}

# bot can trade
@Verifier(tx)
func verify() = {
  let testnet = this.bytes.drop(1).take(1) == base16'54'
  let botPublicKey = factoryAddress.getBinaryValue(kBotPublicKey)
  match tx {
    case _: Order => sigVerify(tx.bodyBytes, tx.proofs[0], botPublicKey)
    case _: InvokeScriptTransaction => if (this.getBinary(kFactoryPublicKey).isDefined()) then false else {
      sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
    }
    case _ => if (!testnet) then false else {
      sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
    }
  }
}
