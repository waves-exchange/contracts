{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let contractFile = "l2mp_staking.ride"
let SEP = "__"
let scale8 = 1_0000_0000
let scale18 = 1_000_000_000_000_000_000
let scale18BigInt = scale18.toBigInt()
let ADDRESS_BYTES_SIZE = 26
let BLOCKS_IN_DAY = 1440

func throwErr(msg: String) = {
    throw(contractFile + ": " + msg)
}

let keyAssetId = ["%s", "assetId"].makeString(SEP)

let keyEmissionPerBlock       = ["%s", "emissionPerBlock"].makeString(SEP)
let keyEmissionPeriodInBlocks = ["%s", "emissionPeriodInBlocks"].makeString(SEP)
let keyStartBlock             = ["%s", "startBlock"].makeString(SEP)
let keyTotalLpAmount          = ["%s", "totalLpAmount"].makeString(SEP)
let keyTotalAssetAmount       = ["%s", "totalAssetAmount"].makeString(SEP)

func keyUserLpAmount(userAddress: String)            = ["%s%s", "userLpAmount", userAddress].makeString(SEP)
func keyUserTotalAssetWithdrawn(userAddress: String) = ["%s%s", "totalAssetWithdrawn", userAddress].makeString(SEP)
func keyUserTotalAssetStaked(userAddress: String)    = ["%s%s", "totalAssetStaked", userAddress].makeString(SEP)

func keyHistory(type: String, userAddress: String, txId: ByteVector) = [
  "%s%s%s",
  type,
  userAddress,
  txId.toBase58String()
].makeString(SEP)

func formatHistory(
  totalProfit: Int,
  price: BigInt,
  totalAssetAmount: Int,
  totalLpAmount: Int
) = [
  "%d%d",
  totalProfit.toString(),
  price.toString(),
  totalAssetAmount.toString(),
  totalLpAmount.toString()
].makeString(SEP)

let totalLpAmount = this.getInteger(keyTotalLpAmount).valueOrElse(0)
let totalAssetAmount = this.getInteger(keyTotalAssetAmount).valueOrElse(0)
let assetIdString = this.getString(keyAssetId).valueOrElse("WAVES")
let assetIdBytes = if (assetIdString == "WAVES") then unit else assetIdString.fromBase58String()
let emissionPeriodInBlocks = this.getInteger(keyEmissionPeriodInBlocks).valueOrElse(BLOCKS_IN_DAY)
let emissionPerPeriod = this.getInteger(keyEmissionPerBlock).valueOrElse(0) * emissionPeriodInBlocks

######################
# MULTISIG FUNCTIONS #
######################
let ADMIN_LIST_SIZE = 5
let QUORUM = 3
let TXID_BYTES_LENGTH = 32

func keyAllowedTxIdVotePrefix(txId: String) = makeString(["%s%s%s", "allowTxId", txId], SEP)
# Make Admin vote key 
func keyFullAdminVote(prefix: String, adminAddress: String) = makeString([prefix, adminAddress], SEP)
# Admin List key
func keyAdminAddressList() = makeString(["%s", "adminAddressList"], SEP)
# Allowed TXID key
func keyAllowedTxId() = makeString(["%s", "txId"], SEP)

func getAdminVote(prefix: String, admin: String) = {
  let voteKey = keyFullAdminVote(prefix, admin)
  getInteger(voteKey).valueOrElse(0)
}

func getAdminsList() = {
  match (this.getString(keyAdminAddressList())) {
    case s:String => s.split(SEP)
    case _ => []
  }
}

func isInAdminList(address: String) = {
  getAdminsList().containsElement(address)
}

# Generate List of keys with same prefix for all admins
func genVotesKeysHelper(a: (List[String], String), adminAddress: String) = {
  let (result, prefix) = a
  (result :+ keyFullAdminVote(prefix, adminAddress), prefix)
}
func genVotesKeys(keyPrefix: String) = {
  let adminList = keyAdminAddressList()
  let (result, prefix) = FOLD<5>(getAdminsList(), ([], keyPrefix), genVotesKeysHelper)
  result
}

# Count all votes for Prefix
func countVotesHelper(result: Int, voteKey: String) = {
  result + getInteger(voteKey).valueOrElse(0)
}
func countVotes(prefix: String) = {
  let votes = genVotesKeys(prefix)
  FOLD<5>(votes, 0, countVotesHelper)
}

# Generate DeleteEntry for all votes with Prefix
func clearVotesHelper(result: List[DeleteEntry], key: String) = {
  result :+ DeleteEntry(key) 
}
func getClearVoteEntries(prefix: String) = {
  let votes = genVotesKeys(prefix)
  FOLD<5>(votes, [], clearVotesHelper)
}

func voteINTERNAL(
  callerAddressString: String, 
  keyPrefix: String, 
  minVotes: Int, 
  voteResult: List[StringEntry|IntegerEntry|DeleteEntry]
) = {
  let voteKey = keyFullAdminVote(keyPrefix, callerAddressString)
  let adminCurrentVote = getAdminVote(keyPrefix, callerAddressString)

  strict err = if (!isInAdminList(callerAddressString)) then {
    throwErr("Address: " + callerAddressString + " not in Admin list")
  } else if (adminCurrentVote == 1) then {
    throwErr(voteKey + " you already voted")
  } else { unit }

  let votes = countVotes(keyPrefix)
  if (votes + 1 >= minVotes) then {
    let clearVoteEntries = getClearVoteEntries(keyPrefix)
    clearVoteEntries ++ voteResult
  } else {
    [ IntegerEntry(voteKey, 1) ]
  }
}
##########################
# MULTISIG FUNCTIONS END #
##########################

func calcTotalProfitForHeight(h: Int) = {
  let startBlock = this.getInteger(keyStartBlock).valueOrElse(0)
  let startPeriod = fraction(startBlock, 1, emissionPeriodInBlocks)
  let elapsedPeriods = h / emissionPeriodInBlocks - startPeriod

  max([0, emissionPerPeriod * elapsedPeriods])
}

func calcTotalProfit() = {
  calcTotalProfitForHeight(height)
}

func getTotalAssetAmountWithProfitOrMaxAvailable() = {
    let totalAssetAmountWithProfit = totalAssetAmount + calcTotalProfit()

    let totalAmount = match(assetIdBytes) {
        case u: Unit => min([totalAssetAmountWithProfit, this.wavesBalance().available])
        case b: ByteVector => min([totalAssetAmountWithProfit, this.assetBalance(b)])
    }

    if (totalLpAmount == 0) then 0 else totalAmount
}

func getCurrentPrice() = {
    if (totalLpAmount != 0) then {
        fraction(
          getTotalAssetAmountWithProfitOrMaxAvailable().toBigInt(),
          scale18BigInt,
          totalLpAmount.toBigInt()
        )
    } else {
        scale18BigInt
    }
}

func getUserLpAmount(userAddress: String) = this.getInteger(keyUserLpAmount(userAddress)).valueOrElse(0)

func getUserAvailableAssetsToWithdraw(userAddress: String) = {
  let userLpAmount = getUserLpAmount(userAddress)
  let userAvailableAssetToWithdraw = fraction(userLpAmount.toBigInt(), getCurrentPrice(), scale18BigInt).toInt()

  if (userAvailableAssetToWithdraw < 0) then 0 else userAvailableAssetToWithdraw
}

func getStakeActions(i: Invocation, userAddress: String) = {
    strict checks = [
        i.payments.size() == 1 || "should include 1 payment".throwErr(),
        i.payments[0].assetId == assetIdBytes || ("payment should be in " + assetIdString).throwErr(),
        i.payments[0].amount > 0 || "payment amount should be greater than 0"
    ]

    let paymentAmount = i.payments[0].amount
    strict paymentLpAmount = fraction(paymentAmount.toBigInt(), scale18BigInt, getCurrentPrice()).toInt()
    let userLpAmount = getUserLpAmount(userAddress)
    let userTotalStakedAmount = this.getInteger(keyUserTotalAssetStaked(userAddress)).valueOrElse(0)

    let newTotalLpAmount= totalLpAmount + paymentLpAmount
    let newTotalAssetAmount = totalAssetAmount + paymentAmount
    let newUserLpAmount = userLpAmount + paymentLpAmount
    let newUserTotalStakedAmount = userTotalStakedAmount + paymentAmount

    let updateStartHeightAction = if (totalLpAmount == 0) then [ IntegerEntry(keyStartBlock, height) ] else []

    [
        StringEntry(
          keyHistory("stake", userAddress, i.transactionId),
          formatHistory(
            calcTotalProfit(),
            getCurrentPrice(),
            totalLpAmount,
            totalAssetAmount
          )
        ),
        IntegerEntry(keyTotalLpAmount, newTotalLpAmount),
        IntegerEntry(keyTotalAssetAmount, newTotalAssetAmount),
        IntegerEntry(keyUserLpAmount(userAddress), newUserLpAmount),
        IntegerEntry(keyUserTotalAssetStaked(userAddress), newUserTotalStakedAmount)
    ] ++ updateStartHeightAction
}

func getWithdrawActions(i: Invocation, lpAssetWithdrawAmount: Int) = {
    let userAddress = i.caller.toString()
    let userLpAmount = getUserLpAmount(userAddress)
    strict check = [
        lpAssetWithdrawAmount > 0 || "LP amount should be more than 0".throwErr(),
        lpAssetWithdrawAmount <= userLpAmount || ("cannot withdraw more than available LP (" + userLpAmount.toString() + ")").throwErr()
    ]

    let newUserLpAmount = userLpAmount - lpAssetWithdrawAmount
    let withdrawAssetAmount = fraction(lpAssetWithdrawAmount.toBigInt(), getCurrentPrice(), scale18BigInt).toInt()
    let newTotalLpAmount = totalLpAmount - lpAssetWithdrawAmount
    let newTotalAssetAmount = fraction(newTotalLpAmount.toBigInt(), getCurrentPrice(), scale18BigInt).toInt()
    
    let userTotalAssetWithdrawn = this.getInteger(keyUserTotalAssetWithdrawn(userAddress)).valueOrElse(0)
    let newUserTotalAssetWithdrawn = userTotalAssetWithdrawn + withdrawAssetAmount

    [
        StringEntry(
          keyHistory("withdraw", userAddress, i.transactionId),
          formatHistory(
            calcTotalProfit(),
            getCurrentPrice(),
            totalAssetAmount,
            totalLpAmount
          )
        ),
        IntegerEntry(keyTotalLpAmount, newTotalLpAmount),
        IntegerEntry(keyTotalAssetAmount, newTotalAssetAmount),
        IntegerEntry(keyUserLpAmount(userAddress), newUserLpAmount),
        IntegerEntry(keyUserTotalAssetWithdrawn(userAddress), newUserTotalAssetWithdrawn),
        IntegerEntry(keyStartBlock, height),
        ScriptTransfer(i.caller, withdrawAssetAmount, assetIdBytes)
    ]
}

@Callable(i)
func setEmissionPerBlock(emissionPerBlock: Int) = {
    strict check = [
        i.caller == this || "permission denied".throwErr()
    ]

    [
        IntegerEntry(keyTotalAssetAmount, getTotalAssetAmountWithProfitOrMaxAvailable()),
        IntegerEntry(keyStartBlock, height),
        IntegerEntry(keyEmissionPerBlock, max([0, emissionPerBlock]))
    ]
}

@Callable(i)
func stake() = {
    getStakeActions(i, i.caller.toString())
}

@Callable(i)
func stakeFor(userAddress: String) = {
    strict check = [
        userAddress.fromBase58String().size() == ADDRESS_BYTES_SIZE || "address is not valid".throwErr()
    ]
    getStakeActions(i, userAddress)
}

@Callable(i)
func withdraw(withdrawAssetAmount: Int) = {
  let userAddress = i.caller.toString()
  let userLpAmount = getUserLpAmount(userAddress)
  let lpAmountToWithdraw = fraction(withdrawAssetAmount.toBigInt(), scale18BigInt, getCurrentPrice()).toInt()
  let userAvailableAssetToWithdraw = getUserAvailableAssetsToWithdraw(userAddress)
  let minWithdrawAssetAmount = fraction(getCurrentPrice(), 1.toBigInt(), scale18BigInt, CEILING).toInt()
  strict check = [
      withdrawAssetAmount > 0 || "withdraw amount should be more than 0".throwErr(),
      withdrawAssetAmount <= userAvailableAssetToWithdraw || ("cannot withdraw more than available (" + userAvailableAssetToWithdraw.toString() + ")").throwErr(),
      withdrawAssetAmount >= minWithdrawAssetAmount || ("withdraw amount is too small. Min: (" + minWithdrawAssetAmount.toString() + ")").throwErr()
  ]

  getWithdrawActions(i, lpAmountToWithdraw)
}

# Return tuple: 
# _1 = user available internal LP amount
# _2 = user available tokens to withdraw
# _3 = current internal LP price
# _4 = user total staked token amount
# _5 = user total withdrawn token amount
@Callable(i)
func getUserAssetsREADONLY(userAddress: String) = {
    let userLpAmount = getUserLpAmount(userAddress)
    let userAvailableAssetToWithdraw = getUserAvailableAssetsToWithdraw(userAddress)
    let userTotalStakedAmount = this.getInteger(keyUserTotalAssetStaked(userAddress)).valueOrElse(0)
    let userTotalAssetWithdrawn = this.getInteger(keyUserTotalAssetWithdrawn(userAddress)).valueOrElse(0)

    (nil, (userLpAmount, userAvailableAssetToWithdraw, getCurrentPrice(), userTotalStakedAmount, userTotalAssetWithdrawn))
}

# Return tuple: 
# _1 = total available internal LP amount
# _2 = total available tokens to withdraw
# _3 = current internal LP price
@Callable(i)
func getTotalAssetsREADONLY() = {
    (nil, (totalLpAmount, getTotalAssetAmountWithProfitOrMaxAvailable(), getCurrentPrice()))
}

######################
# MULTISIG FUNCTIONS #
######################
# Vote for txId that is allowed in Verifier
@Callable(i)
func voteForTxId(txId: String) = {
  let callerAddressString = toBase58String(i.caller.bytes)
  let keyPrefix = keyAllowedTxIdVotePrefix(txId)
  let result = [ StringEntry(keyAllowedTxId(), txId) ]
  let allowedTxIdOption = this.getString(keyAllowedTxId())
  
  strict err = [
    txId.fromBase58String().size() == TXID_BYTES_LENGTH || throwErr(txId + " is not valid txId"),
    allowedTxIdOption == unit || allowedTxIdOption.value() != txId || throwErr(txId + " is already allowed")
  ]

  voteINTERNAL(callerAddressString, keyPrefix, QUORUM, result)
}
##########################
# MULTISIG FUNCTIONS END #
##########################

@Verifier(tx)
func verify() = {
  let byAdmins = (tx.id == this.getString(keyAllowedTxId()).valueOrElse("").fromBase58String())
  let byOwner = (if (getAdminsList().size() >= QUORUM) then {
      false
    } else {
      sigVerify(tx.bodyBytes, tx.proofs[0], tx.senderPublicKey)
  })

  byAdmins || byOwner
}
