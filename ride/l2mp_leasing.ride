{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let contractFile = "l2mp_leasing.ride"
let SEP = "__"

func throwErr(msg: String) = {
    throw(contractFile + ": " + msg)
}

let keyAssetId = ["%s", "assetId"].makeString(SEP)

let keyPeriodOffsetId     = ["%s", "offsetId"].makeString(SEP)
let keyPeriodOffsetHeight = ["%s", "offsetHeight"].makeString(SEP)
let keyPeriodLength       = ["%s", "periodLength"].makeString(SEP)

let periodOffsetId     = this.getInteger(keyPeriodOffsetId).valueOrElse(0)
let periodLength       = this.getInteger(keyPeriodLength).valueOrElse(10000)
let periodOffsetHeight = this.getInteger(keyPeriodOffsetHeight).valueOrElse(-1)
let currentPeriodId = {
    if (height > periodOffsetHeight && periodOffsetHeight != -1) then 
        ((height - periodOffsetHeight) / periodLength) + periodOffsetId
    else
        max([0, periodOffsetId - 1])
}
let currentPeriodHeight = {
    periodOffsetHeight + ((currentPeriodId - periodOffsetId) * periodLength)
}
let nextPeriodHeight = {
    currentPeriodHeight + periodLength
}

func keyLeasingNodeData(nodeAddress: String) = ["%s", nodeAddress].makeString(SEP)

func keyUserToClaim(userAddress: String) = ["%s%s", "toClaim", userAddress].makeString(SEP)

func keyUserLeasingNodeData(userAddress: String, nodeAddress: String) = ["%s%s", nodeAddress, userAddress].makeString(SEP)

let assetIdString = this.getString(keyAssetId).valueOrElse("WAVES")
let assetIdBytes  = if (assetIdString == "WAVES") then unit else assetIdString.fromBase58String()

func isValidAddress(address: String) = {
    match (address.addressFromString()) {
        case a:Address => true
        case _ => false
      }
}

func getLeasingNodeEntry(nodeAddress: String, currentLeased: Int, nextLeased: Int) = {
    let valueString = [
        "%d%d%d%d",
        currentPeriodHeight.toString(),
        currentLeased.toString(),
        nextPeriodHeight.toString(),
        nextLeased.toString()
    ].makeString(SEP)

    StringEntry(keyLeasingNodeData(nodeAddress), valueString)
}

func getLeasingNodeData(nodeAddress: String) = {
    let leasingNodeDataStringRaw = this.getString(keyLeasingNodeData(nodeAddress))

    match (leasingNodeDataStringRaw) {
        case ds:String => {
            let dataList = ds.split(SEP)
            let nodeCurrentPeriod = dataList[1].parseIntValue()
            let nodeCurrentLeased = dataList[2].parseIntValue()
            let nodeNextPeriod    = dataList[3].parseIntValue()
            let nodeNextLeased    = dataList[4].parseIntValue()

            if (height < nodeNextPeriod) 
            then (nodeCurrentLeased, nodeNextLeased)
            else (nodeNextLeased, nodeNextLeased)
        }
        case _ => (0, 0)
      }
}

func getUserLeasingEntry(
        nodeAddress: String, 
        userAddress: String, 
        userCurrentLeased: Int, 
        userNextLeased: Int
    ) = {
    let valueString = [
        "%d%d%d%d",
        currentPeriodHeight.toString(),
        userCurrentLeased.toString(),
        nextPeriodHeight.toString(),
        userNextLeased.toString()
    ].makeString(SEP)

    StringEntry(keyUserLeasingNodeData(userAddress, nodeAddress), valueString)
}

func getUserLeasingData(nodeAddress: String, userAddress: String) = {
    let leasingUserDataStringRaw = this.getString(keyUserLeasingNodeData(userAddress, nodeAddress))

    match (leasingUserDataStringRaw) {
        case ds:String => {
            let dataList = ds.split(SEP)
            let userCurrentPeriod = dataList[1].parseIntValue()
            let userCurrentLeased = dataList[2].parseIntValue()
            let userNextPeriod    = dataList[3].parseIntValue()
            let userNextLeased    = dataList[4].parseIntValue()

            if (height < userNextPeriod) 
            then (userCurrentLeased, userNextLeased)
            else (userNextLeased, userNextLeased)
        }
        case _ => (0, 0)
      }
}

func getUserToClaimEntry(userAddress: String, toClaim: Int, toUnlock: Int) = {
    let valueString = [
        "%d%d%d%d", 
        currentPeriodHeight.toString(),
        toClaim.toString(),
        nextPeriodHeight.toString(),
        toUnlock.toString()
    ].makeString(SEP)

    StringEntry(keyUserToClaim(userAddress), valueString)
}

func getUserToClaimBalance(userAddress: String) = {
    let userToClaimDataStringRaw = this.getString(keyUserToClaim(userAddress))

    match (userToClaimDataStringRaw) {
        case ds:String => {
            let dataList = ds.split(SEP)
            let currentPeriod = dataList[1].parseIntValue()
            let toClaim       = dataList[2].parseIntValue()
            let nextPeriod    = dataList[3].parseIntValue()
            let toUnlock      = dataList[4].parseIntValue()

            if (height < nextPeriod) 
                then (toClaim, toUnlock)
                else (toClaim + toUnlock, 0)
        }
        case _ => (0, 0)
      }
}

func getStakeActions(nodeAddress: String, userAddress: String, i: Invocation) = {
    strict checks = [
        i.payments.size() == 1 || "payment size should be exactly 1".throwErr(),
        i.payments[0].assetId == assetIdBytes || ["payment assetId should be:", assetIdString].makeString(" ").throwErr(),
        nodeAddress.isValidAddress() || ["node address is not valid:", nodeAddress].makeString(" ").throwErr(),
        userAddress.isValidAddress() || ["user address is not valid:", userAddress].makeString(" ").throwErr()
    ]

    let userLeasingAmount = i.payments[0].amount

    let (nodeCurrentLeased, nodeNextLeased) = getLeasingNodeData(nodeAddress)
    let newNodeNextLease = nodeNextLeased + userLeasingAmount

    let (userCurrentLeased, userNextLeased) = getUserLeasingData(nodeAddress, userAddress)
    let newUserNextLeased = userNextLeased + userLeasingAmount

    [
        getLeasingNodeEntry(nodeAddress, nodeCurrentLeased, newNodeNextLease),
        getUserLeasingEntry(nodeAddress, userAddress, userCurrentLeased, newUserNextLeased)
    ]
}

func getUnstakeActions(nodeAddress: String, userAddress: String, unstakeAmount: Int) = {
    let (nodeCurrentLeased, nodeNextLeased) = getLeasingNodeData(nodeAddress)
    let (userCurrentLeased, userNextLeased) = getUserLeasingData(nodeAddress, userAddress)
    
    strict checks = [
        unstakeAmount > 0 || "unstake amount should be greater than 0".throwErr(),
        unstakeAmount <= userNextLeased || "unstake amount should be less or equal user staked amount".throwErr(),
        unstakeAmount <= nodeNextLeased || "unstake amount should be less or equal node staked amount".throwErr(),
        nodeAddress.isValidAddress() || ["node address is not valid:", nodeAddress].makeString(" ").throwErr(),
        userAddress.isValidAddress() || ["user address is not valid:", userAddress].makeString(" ").throwErr()
    ]

    let newNodeNextLease = nodeNextLeased - unstakeAmount
    let newUserNextLeased = userNextLeased - unstakeAmount

    let (toClaim, toUnlock) = getUserToClaimBalance(userAddress)
    # let newLeased = leased - unstakeAmount
    let newToUnlock = toUnlock + unstakeAmount

    [
        getLeasingNodeEntry(nodeAddress, nodeCurrentLeased, newNodeNextLease),
        getUserLeasingEntry(nodeAddress, userAddress, userCurrentLeased, newUserNextLeased),
        getUserToClaimEntry(userAddress, toClaim, newToUnlock)
    ]
}

func getClaimUnlockedActions(userAddress: String, claimAmount: Int) = {
    let (toClaim, toUnlock) = getUserToClaimBalance(userAddress)

    strict checks = [
        claimAmount > 0 || "claim amount should be greater than 0".throwErr(),
        claimAmount <= toClaim || "claim amount should be less or equal unlocked amount".throwErr(),
        userAddress.isValidAddress() || ["user address is not valid:", userAddress].makeString(" ").throwErr()
    ]

    let newToClaim = toClaim - claimAmount

    [
        getUserToClaimEntry(userAddress, newToClaim, toUnlock),
        ScriptTransfer(userAddress.addressFromStringValue(), claimAmount, assetIdBytes)
    ]
}

func getStakeFromUnlockedActions(nodeAddress: String, userAddress: String, userLeasingAmount: Int) = {
    let (toClaim, toUnlock) = getUserToClaimBalance(userAddress)

    let available = toUnlock + toClaim

    strict checks = [
        userLeasingAmount > 0 || "amount should be greater than 0".throwErr(),
        userLeasingAmount <= available || "amount should be less or equal to available".throwErr(),
        nodeAddress.isValidAddress() || ["node address is not valid:", nodeAddress].makeString(" ").throwErr(),
        userAddress.isValidAddress() || ["user address is not valid:", userAddress].makeString(" ").throwErr()
    ]

    let (nodeCurrentLeased, nodeNextLeased) = getLeasingNodeData(nodeAddress)
    let newNodeNextLease = nodeNextLeased + userLeasingAmount

    let (userCurrentLeased, userNextLeased) = getUserLeasingData(nodeAddress, userAddress)
    let newUserNextLeased = userNextLeased + userLeasingAmount

    let newToUnlock = max([0, (toUnlock - userLeasingAmount)])
    let newToClaim = min([toClaim, (toClaim + (toUnlock - userLeasingAmount))])

    [
        getLeasingNodeEntry(nodeAddress, nodeCurrentLeased, newNodeNextLease),
        getUserLeasingEntry(nodeAddress, userAddress, userCurrentLeased, newUserNextLeased),
        getUserToClaimEntry(userAddress, newToClaim, newToUnlock)
    ]
}

func getSetNewPeriodLengthActions(newPeriodLength: Int) = {
    strict check = [
        newPeriodLength > 0 || "period length should be greater than 0".throwErr()
    ]

    if (periodOffsetHeight == -1) then {
        [
            IntegerEntry(keyPeriodLength, newPeriodLength),
            IntegerEntry(keyPeriodOffsetHeight, height)
        ]
    } else {
        [
            IntegerEntry(keyPeriodOffsetId, currentPeriodId + 1),
            IntegerEntry(keyPeriodOffsetHeight, nextPeriodHeight),
            IntegerEntry(keyPeriodLength, newPeriodLength)
        ]
    }
}

@Callable(i)
func setNewPeriodLength(newPeriodLength: Int) = {
    getSetNewPeriodLengthActions(newPeriodLength)
}

@Callable(i)
func getNodeDataREADONLY(nodeAddress: String) = {
    let (currentLease, nextLeased) = getLeasingNodeData(nodeAddress)

    ([], (currentPeriodHeight, currentLease, nextPeriodHeight, nextLeased, height))
}

@Callable(i)
func getUserDataREADONLY(userAddress: String) = {
    let (toClaim, toUnlock) = getUserToClaimBalance(userAddress)

    ([], (currentPeriodHeight, toClaim, nextPeriodHeight, toUnlock, height))
}

@Callable(i)
func stakeFor(nodeAddress: String, userAddress: String) = {
    getStakeActions(nodeAddress, userAddress, i)
}

@Callable(i)
func stake(nodeAddress: String) = {
    let userAddress = i.caller.toString()

    getStakeActions(nodeAddress, userAddress, i)
}

@Callable(i)
func stakeFromUnlocked(nodeAddress: String, amount: Int) = {
    let userAddress = i.caller.toString()

    getStakeFromUnlockedActions(nodeAddress, userAddress, amount)
}

@Callable(i)
func unstake(nodeAddress: String, amount: Int) = {
    let userAddress = i.caller.toString()

    getUnstakeActions(nodeAddress, userAddress, amount)
}

@Callable(i)
func claim(amount: Int) = {
    let userAddress = i.caller.toString()

    getClaimUnlockedActions(userAddress, amount)
}

@Callable(i)
func claimAll() = {
    let userAddress = i.caller.toString()
    let (toClaim, toUnlock) = getUserToClaimBalance(userAddress)

    strict checks = [
        toClaim > 0 || "nothing to claim".throwErr()
    ]

    getClaimUnlockedActions(userAddress, toClaim)
}
