{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let SEP = "__"
let contractFilename = "manager_vault.ride"

func throwErr(s: String) = {
  throw(contractFilename + ": " + s)
}

# Manager Public Key
func keyActiveManagerPublicKey()  = makeString(["%s", "managerPublicKey"], SEP)
func keyPendingManagerPublicKey() = makeString(["%s", "pendingManagerPublicKey"], SEP)

# Set New Manager vote keys
func keySetNewManagerVotePrefix(managerPublicKey: String)          = makeString(["%s%s%s", "setManager", managerPublicKey], SEP)
func keySetNewManagerVote(managerPublicKey: String, admin: String) = makeString([keySetNewManagerVotePrefix(managerPublicKey), admin], SEP)
func getSetNewManagerVote(managerPublicKey: String, admin: String) = getInteger(keySetNewManagerVote(managerPublicKey, admin)).valueOrElse(0)

# Deactivate Manager vote keys
func keyDeactivateManagerVotePrefix()        = makeString(["%s%s", "deactivateManager"], SEP)
func keyDeactivateManagerVote(admin: String) = makeString([keyDeactivateManagerVotePrefix(), admin], SEP)
func getDeactivateManagerVote(admin: String) = getInteger(keyDeactivateManagerVote(admin)).valueOrElse(0)

# Activate Manager vote keys
func keyActivateManagerVotePrefix()        = makeString(["%s%s", "activateManager"], SEP)
func keyActivateManagerVote(admin: String) = makeString([keyActivateManagerVotePrefix(), admin], SEP)
func getActivateManagerVote(admin: String) = getInteger(keyActivateManagerVote(admin)).valueOrElse(0)

# Admin List key
func keyAdminAdressList() = makeString(["%s", "adminAddressList"], SEP)

func pendingManagerPublicKeyOrUnit() = match keyPendingManagerPublicKey().getString() {
  case s: String => s.fromBase58String()
  case _: Unit => unit
}

func getAdminsList() = {
  this.getString(keyAdminAdressList()).valueOrElse("").split(SEP)
}

func isInAdminList(address: String) = {
  match (getAdminsList().indexOf(address)) {
      case t:Int => true
      case _ => false
    }
}

# Generate List of keys with same prefix for all admins
func genVotesKeysHelper(a: (List[String], String), adminAddress: String) = {
  let (result, prefix) = a
  (result :+ makeString([prefix, adminAddress], SEP), prefix)
}
func genVotesKeys(keyPrefix: String) = {
  let adminList = keyAdminAdressList()
  FOLD<10>(getAdminsList(), ([], keyPrefix), genVotesKeysHelper)
}

# Count all votes for Prefix
func countVotesHelper(result: Int, voteKey: String) = {
  result + getInteger(voteKey).valueOrElse(0)
}
func countVotes(prefix: String) = {
  let votes = genVotesKeys(prefix)._1
  FOLD<10>(votes, 0, countVotesHelper)
}

# Generate DeleteEntry for all votes with Prefix
func clearVotesHelper(result: List[DeleteEntry], key: String) = {
  result :+ DeleteEntry(key) 
}
func getClearVotesEntries(prefix: String) = {
  let votes = genVotesKeys(prefix)._1
  FOLD<10>(votes, [], clearVotesHelper)
}

func voteINTERNAL(
    callerAddressString: String, 
    adminCurrentVote: Int, 
    keyPrefix: String, 
    minVotes: Int, 
    voteResult: 
    List[StringEntry|IntegerEntry|DeleteEntry]
  ) = {
  let voteKey = makeString([keyPrefix, callerAddressString], SEP)
  if (isInAdminList(callerAddressString)) then {
    if (adminCurrentVote == 1) then {
      throwErr(voteKey + " you already voted")
    } else {
      let votes = countVotes(keyPrefix)
      if (votes + 1 >= minVotes) then {
        let clearVotesEntries = getClearVotesEntries(keyPrefix)
        clearVotesEntries ++ voteResult
      } else {
        [ IntegerEntry(voteKey, 1)]
      }
    }
  } else { 
    throwErr("Address: " + callerAddressString + " not in Admin list")
  }
}

# Manager should confirm themself
@Callable(i)
func confirmManager() = {
  let pm = pendingManagerPublicKeyOrUnit()
  strict hasPM    = pm.isDefined() || "no pending manager".throwErr()
  strict checkPM  = i.callerPublicKey == pm.value() || "you are not pending manager".throwErr()

  [ StringEntry(keyActiveManagerPublicKey(), pm.value().toBase58String()) ]
}

# Vote for new Manager (min: 2 votes)
# Set pendingManagerPublicKey
# Manager should confirm or activate by vote
@Callable(i)
func voteForNewManger(newManagerPublicKey: String) = {
  let callerAddressString = toBase58String(i.caller.bytes)
  let keyPrefix = keySetNewManagerVotePrefix(newManagerPublicKey)
  let adminCurrentVote = getSetNewManagerVote(newManagerPublicKey, callerAddressString)
  let minVotes = 2
  let result = [ StringEntry(keyPendingManagerPublicKey(), newManagerPublicKey) ]
  
  voteINTERNAL(callerAddressString, adminCurrentVote, keyPrefix, minVotes, result)
}

# Vote to Deactivate Manager (min: 1 vote)
# Clears managerPublicKey value
@Callable(i)
func deactivateManager() = {
  let callerAddressString = toBase58String(i.caller.bytes)
  let keyPrefix = keyDeactivateManagerVotePrefix()
  let adminCurrentVote = getDeactivateManagerVote(callerAddressString)
  let minVotes = 1
  let result = [ DeleteEntry(keyActiveManagerPublicKey()) ]
  
  voteINTERNAL(callerAddressString, adminCurrentVote, keyPrefix, minVotes, result)
}

# Vote to Activate Pending Manager (min: 2 vote)
# Copies pendingManagerPublicKey to managerPublicKey
@Callable(i)
func activateManager() = {
  let callerAddressString = toBase58String(i.caller.bytes)
  let keyPrefix = keyActivateManagerVotePrefix()
  let adminCurrentVote = getActivateManagerVote(callerAddressString)
  let minVotes = 2
  let pendingManagerString = getStringValue(keyPendingManagerPublicKey())
  let result = [ StringEntry(keyActiveManagerPublicKey(), pendingManagerString) ]
  
  voteINTERNAL(callerAddressString, adminCurrentVote, keyPrefix, minVotes, result)
}