{-# STDLIB_VERSION 6 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}

let contractFilename = "user_pools.ride"

let SEP = "__"
let wavesAssetId = "WAVES"
let VLTPOOL = "VLTPOOL"
let STBLPOOL = "STBLPOOL"

let invalidPriceAsset = "Invalid price asset"

func wrapErr(msg: String) = [contractFilename, ": ", msg].makeString("")
func throwErr(msg: String) = msg.wrapErr().throw()

func throwPD() = "Permission denied".throwErr()
func throwCreateNotCalled() = "Create is not called for assets pair".throwErr()
func throwYouNotIssuer() = "You are not amountAsset issuer".throwErr()
func throwPoolExists() = "Pool with such assets already exists".throwErr()
func throwAssetNotVerified() = "Asset is not verified".throwErr()
func throwInvalidPriceAsset() = invalidPriceAsset.throwErr()
func throwInvalidFeeAsset() = "Invalid fee asset".throwErr()
func throwInvalidAmountAsset() = "Invalid amount asset attached".throwErr()
func throwInvalidStatus() = "Invalid status".throwErr()
func throwCanActivateOnlyPendingPool() = "Can activate pool only in 'pending' status".throwErr()
func throwFactoryReturnedNotString() = "FactoryV2 returned not string".throwErr()
func throwInvalidPriceAssetAmount() = "invalid price asset amount".throwErr()
func throwInvalidFee() = "invalid fee".throwErr()
func throwInvalidAssetPair() = "invalid asset pair".throwErr()

func keyManagerPublicKey() = ["%s", "managerPublicKey"].makeString(SEP)
func keyManagerVaultAddress() = "%s__managerVaultAddress"
func keyAdminPubKeys() = ["%s", "adminPubKeys"].makeString(SEP)

func keyStatus(amountAssetId: String, priceAssetId: String) = ["%s%s%s", "status", amountAssetId, priceAssetId].makeString(SEP)

func keyFactoryContract() = ["%s", "factoryContract"].makeString(SEP)
func keyAssetsStoreContract() = ["%s", "assetsStoreContract"].makeString(SEP)
func keyEmissionContract() = ["%s", "emissionContract"].makeString(SEP)

func keySuffix(amountAssetId: String, priceAssetId: String) = ["%s%s%s", "suffix", amountAssetId, priceAssetId].makeString(SEP)
func keyLastIndex() = ["%s", "lastIndex"].makeString(SEP)
let indexSuffix = "u"
let statusPending = "pending" # 'create' func called and pool waiting for lp.ride setScript+constructor and 'activate' func call
let statusDeclined = "declined" # pool will never created by any reason
let statusActive = "active" # 'activate' func called and pool waiting while matcher bot starts
let statuses = [statusPending, statusDeclined, statusActive]

func keyCreateCalled(amountAssetId: String, priceAssetId: String) = ["%s%s%s", "createCalled", amountAssetId, priceAssetId].makeString(SEP)
func keyCreateCaller(amountAssetId: String, priceAssetId: String) = ["%s%s%s", "createCaller", amountAssetId, priceAssetId].makeString(SEP)
func keyAmountAssetAmount(amountAssetId: String, priceAssetId: String) = ["%s%s%s", "amountAssetAmount", amountAssetId, priceAssetId].makeString(SEP)
func keyPriceAssetAmount(amountAssetId: String, priceAssetId: String) = ["%s%s%s", "priceAssetAmount", amountAssetId, priceAssetId].makeString(SEP)
func keyHeight(amountAssetId: String, priceAssetId: String) = ["%s%s%s", "height", amountAssetId, priceAssetId].makeString(SEP)
func keyPoolType(amountAssetId: String, priceAssetId: String) = ["%s%s%s", "poolType", amountAssetId, priceAssetId].makeString(SEP)

func keyFeeAssetId() = ["%s", "feeAssetId"].makeString(SEP)
func keyFeeAmount() = ["%s", "feeAmount"].makeString(SEP)
func keyPoolAssetDefaultMinAmount() = ["%s", "poolAssetDefaultMinAmount"].makeString(SEP)
func keyPoolAssetsMinAmount(assetId: String) = ["%s%s", "poolAssetMinAmount", assetId].makeString(SEP)
func keyPriceAssets() = ["%s", "priceAssets"].makeString(SEP)

func getManagerVaultAddressOrThis() = {
  match keyManagerVaultAddress().getString() {
    case s:String => s.addressFromStringValue()
    case _=> this
  }
}

func getStringOrFail(key: String) = this.getString(key).valueOrErrorMessage(key + " is not defined")
func stringOptionToList(stringOrUnit: String|Unit) = match stringOrUnit {
  case s: String => if (s.size() == 0) then nil else s.split_4C(SEP)
  case _: Unit => nil
}

let factoryContract = keyFactoryContract().getStringOrFail().addressFromStringValue()
let keyVotingEmissionContract = ["%s", "votingEmissionContract"].makeString(SEP)
let votingEmissionContract = factoryContract
  .getString(keyVotingEmissionContract)
  .valueOrErrorMessage("voting emission contract address is required".wrapErr())
  .addressFromStringValue()
let keyVotingEmissionCandidateContract = ["%s", "votingEmissionCandidateContract"].makeString(SEP)
let votingEmissionCandidateContract = votingEmissionContract
  .getString(keyVotingEmissionCandidateContract)
  .valueOrErrorMessage("voting emission candidate contract address is required".wrapErr())
  .addressFromStringValue()

func isCreateCalled(amountAssetId: String, priceAssetId: String) = {
  keyCreateCalled(amountAssetId, priceAssetId).getBoolean().valueOrElse(false)
}

func mustCreateCalled(amountAssetId: String, priceAssetId: String) = {
  isCreateCalled(amountAssetId, priceAssetId) || throwCreateNotCalled()
}

func managerPublicKeyOrUnit() = {
  let managerVaultAddress = getManagerVaultAddressOrThis()
  match managerVaultAddress.getString(keyManagerPublicKey()) {
    case s: String => s.fromBase58String()
    case _: Unit => unit
  }
}

func isManager(i: Invocation) = {
  match managerPublicKeyOrUnit() {
    case pk: ByteVector => i.callerPublicKey == pk
    case _: Unit => i.caller == this
  }
}

func mustManager(i: Invocation) = {
  i.isManager() || throwPD()
}

func mustAdmin(i: Invocation) = {
  let adminPKs = keyAdminPubKeys().getString().stringOptionToList()
  if (adminPKs.containsElement(i.callerPublicKey.toBase58String())) then {
    true
  } else {
    i.mustManager()
  }
}

func isVerified(assetId: String) = {
  keyAssetsStoreContract().getStringOrFail().addressFromStringValue().getInteger("status_<"+assetId+">").valueOrElse(0) == 2
}

func getIdAndInfo(payment: AttachedPayment) = {
  match payment.assetId {
    case id: ByteVector => {
      let info = id.assetInfo().value()
      (id.toBase58String(), info)
    }
    case _: Unit => (wavesAssetId, unit)
  }
}

func validStatus(status: String) = {
  statuses.containsElement(status)
}

func _create(i: Invocation, poolType: String) = {
  # The order of the assets matters if both are in the price assets list
  let amountAssetPayment = i.payments[0].value()
  let priceAssetPayment = i.payments[1].value()
  let feeAssetPayment = i.payments[2].value()

  let (amountAssetId, amountAssetInfo) = amountAssetPayment.getIdAndInfo()
  let (priceAssetId, priceAssetInfo) = priceAssetPayment.getIdAndInfo()
  let (feeAssetId, feeAssetInfo) = feeAssetPayment.getIdAndInfo()

  let amountAssetAmount = amountAssetPayment.amount
  let priceAssetAmount = priceAssetPayment.amount
  let feeAssetAmount = feeAssetPayment.amount

  let priceAssetsList = factoryContract.getString(keyPriceAssets()).stringOptionToList()

  let assetMinAmountDefault = factoryContract.getIntegerValue(keyPoolAssetDefaultMinAmount())
  let amountAssetMinAmount = factoryContract.getInteger(keyPoolAssetsMinAmount(amountAssetId)).valueOrElse(assetMinAmountDefault)
  let priceAssetMinAmount = factoryContract.getInteger(keyPoolAssetsMinAmount(priceAssetId)).valueOrElse(assetMinAmountDefault)

  let lastIndex = keyLastIndex().getInteger().valueOrElse(0)
  let curIndex = lastIndex + 1

  let emissionContract = keyEmissionContract().getStringOrFail().addressFromStringValue()
  let poolExists = factoryContract.invoke("poolExistsREADONLY", [
    amountAssetId,
    priceAssetId
  ], []).exactAs[Boolean]

  strict checks = [
    !isCreateCalled(amountAssetId, priceAssetId) || throwPoolExists(),
    !poolExists || throwPoolExists(),
    amountAssetId != priceAssetId || throwInvalidAssetPair(),
    i.isManager() || (amountAssetId.isVerified() && priceAssetId.isVerified()) || throwInvalidAssetPair(),
    priceAssetsList.containsElement(amountAssetId) || priceAssetsList.containsElement(priceAssetId) || throwInvalidAssetPair(),
    i.isManager() || keyFeeAssetId().getString() == feeAssetId || throwInvalidFeeAsset(),
    i.isManager() || amountAssetAmount >= assetMinAmountDefault || throwInvalidAmountAsset(),
    i.isManager() || priceAssetAmount >= priceAssetMinAmount || throwInvalidPriceAssetAmount(),
    i.isManager() || feeAssetAmount == keyFeeAmount().getInteger() || throwInvalidFee()
  ]

  let paymentsWithFeeSize = 3
  strict burnEmissionInv = if (i.payments.size() >= paymentsWithFeeSize) then {
    emissionContract.invoke("burn", [], [AttachedPayment(feeAssetId.fromBase58String(), feeAssetAmount)])
  } else unit

  [
    BooleanEntry(keyCreateCalled(amountAssetId, priceAssetId), true),
    StringEntry(keyCreateCaller(amountAssetId, priceAssetId), i.caller.toString()),
    IntegerEntry(keyLastIndex(), curIndex),
    StringEntry(keySuffix(amountAssetId, priceAssetId), curIndex.toString()+indexSuffix),
    IntegerEntry(keyHeight(amountAssetId, priceAssetId), height),
    StringEntry(keyStatus(amountAssetId, priceAssetId), statusPending),
    IntegerEntry(keyAmountAssetAmount(amountAssetId, priceAssetId), amountAssetAmount),
    IntegerEntry(keyPriceAssetAmount(amountAssetId, priceAssetId), priceAssetAmount),
    StringEntry(keyPoolType(amountAssetId, priceAssetId), poolType)
  ]
}

@Callable(i)
func constructor(factoryV2Address: String, assetsStoreAddress: String, emissionAddress: String, feeAssetId: String, feeAmount: Int) = {
  strict checkCaller = i.mustManager()

  [
    StringEntry(keyFactoryContract(), factoryV2Address),
    StringEntry(keyAssetsStoreContract(), assetsStoreAddress),
    StringEntry(keyEmissionContract(), emissionAddress),
    StringEntry(keyFeeAssetId(), feeAssetId),
    IntegerEntry(keyFeeAmount(), feeAmount)
  ]
}

@Callable(i)
func create() = {
  _create(i, VLTPOOL)
}

@Callable(i)
func createStable() = {
  strict checkCaller = i.mustManager()

  _create(i, STBLPOOL)
}

@Callable(i)
func activate(poolAddress: String, amountAssetId: String, amountAssetTicker: String, priceAssetId: String, priceAssetTicker: String, logo: String) = {
  strict checks = [
    i.mustAdmin(),
    isCreateCalled(amountAssetId, priceAssetId) || throwCreateNotCalled(),
    keyStatus(amountAssetId, priceAssetId).getString().value() == statusPending || throwCanActivateOnlyPendingPool()
  ]

  let poolTypeOption = this.getString(keyPoolType(amountAssetId, priceAssetId))

  strict activateNewPoolInv = factoryContract.invoke(
    "activateNewPool", [
      poolAddress,
      amountAssetId,
      priceAssetId,
      amountAssetTicker+priceAssetTicker+"LP",
      amountAssetTicker+"/"+priceAssetTicker+" pool liquidity provider token",
      0,
      if (poolTypeOption == unit) then "VLTPOOL" else poolTypeOption.value(),
      logo
    ], []
  )
  strict lpAssetId = match (activateNewPoolInv) {
    case id: String => id
    case _ => throwFactoryReturnedNotString()
  }

  strict beforePut = this.assetBalance(lpAssetId.fromBase58String())
  strict put = poolAddress.addressFromStringValue().invoke(
    "put", [
      0,
      false
    ], [
      AttachedPayment(if (amountAssetId == "WAVES") then unit else amountAssetId.fromBase58String(), keyAmountAssetAmount(amountAssetId, priceAssetId).getInteger().value()),
      AttachedPayment(if (priceAssetId == "WAVES") then unit else priceAssetId.fromBase58String(), keyPriceAssetAmount(amountAssetId, priceAssetId).getInteger().value())
    ]
  )
  strict afterPut = this.assetBalance(lpAssetId.fromBase58String())

  let user = keyCreateCaller(amountAssetId, priceAssetId).getString().value().addressFromString().value()

  # skip voting_emission_candidate
  strict res = votingEmissionCandidateContract.invoke("approve", [amountAssetId, priceAssetId], [])

  [
    StringEntry(keyStatus(amountAssetId, priceAssetId), statusActive),
    ScriptTransfer(user, afterPut-beforePut, lpAssetId.fromBase58String())
  ]
}

@Callable(i)
func setAdmins(adminPubKeys: List[String]) = {
  strict checkCaller = i.mustManager()
  [StringEntry(keyAdminPubKeys(), adminPubKeys.makeString(SEP))]
}

@Callable(i)
func priceAssetsREADONLY() = {
  (nil, keyPriceAssets().getString().stringOptionToList())
}

@Callable(i)
func statusREADONLY(amountAssetId: String, priceAssetId: String) = {
  let status = match keyStatus(amountAssetId, priceAssetId).getString() {
    case s: String => s
    case _ => unit
  }

  (nil, status)
}

@Callable(i)
func getPoolCreatorREADONLY(amountAssetId: String, priceAssetId: String) = {
  let creator = keyCreateCaller(amountAssetId, priceAssetId).getString().valueOrElse("")
  (nil, creator)
}

@Callable(i)
func deletePool(amountAssetId: String, priceAssetId: String) = {
  strict checkCaller = i.caller == factoryContract || i.mustManager() || "Permission denied".throwErr()

  [
    DeleteEntry(keyCreateCalled(amountAssetId, priceAssetId)),
    DeleteEntry(keyCreateCaller(amountAssetId, priceAssetId)),
    DeleteEntry(keySuffix(amountAssetId, priceAssetId)),
    DeleteEntry(keyHeight(amountAssetId, priceAssetId)),
    DeleteEntry(keyStatus(amountAssetId, priceAssetId)),
    DeleteEntry(keyAmountAssetAmount(amountAssetId, priceAssetId)),
    DeleteEntry(keyPriceAssetAmount(amountAssetId, priceAssetId)),
    DeleteEntry(keyPoolType(amountAssetId, priceAssetId))
  ]
}

@Verifier(tx)
func verify() = {
  let targetPublicKey = match managerPublicKeyOrUnit() {
    case pk: ByteVector => pk
    case _: Unit => tx.senderPublicKey
  }
  sigVerify(tx.bodyBytes, tx.proofs[0], targetPublicKey)
}
