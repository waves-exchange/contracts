{-# STDLIB_VERSION 5 #-}
{-# CONTENT_TYPE DAPP #-}
{-# SCRIPT_TYPE ACCOUNT #-}


let nextVoteNumber = 0

func managerPublicKeyOrUnit() = match keyManagerPublicKey().getString() {
  case s: String => s.fromBase58String()
  case _: Unit => unit
}

func pendingManagerPublicKeyOrUnit() = match keyPendingManagerPublicKey().getString() {
  case s: String => s.fromBase58String()
  case _: Unit => unit
}

func isManager(i: Invocation) = {
  match managerPublicKeyOrUnit() {
    case pk: ByteVector => i.callerPublicKey == pk
    case _: Unit => i.caller == this
  }
}

func mustManager(i: Invocation) = {
  i.isManager() || "permission denied".throw()
}

@Callable(i)
func constructor(
    gwxContractAddressString: string
) = {
    strict gwxContractAddress = gwxContractAddressString
}

@Callable(i)
func startNewVote(description: String, startTimeStamp: Int, expirationTime: Int) = {
    strict checks = [
        i.mustManager()
    ]

    nextVoteNumber = nextVoteNumber + 1
    [
        StringEntry(toString(nextVoteNumber - 1), description)

        StringEntry(toString(nextVoteNumber - 1) + "__end", startTimeStamp + expirationTime)

        IntegerEntry(proposalIndex + "__totalVote", 0)
    ]
    
}

@Callable(i)
func voteFor(proposalIndex: String, choice: Boolean) = {
    strict checks = [
        lastBlock.timestamp < getIntegerValue(proposalIndex + "__end")
        getStringValue(i.caller + "__voteFor__" + proposalIndex) != 0
    ]
    let gwxNumber = invoke(
        gwxContractAddress,
        "calcCurrentGwxAmount",
        [i.caller],
        []
    )
    let result = if (choice) then gwxNumber else -gwxNumber
    [
        IntegerEntry(i.caller + "__voteFor__" + proposalIndex, result)
        IntegerEntry(proposalIndex + "__totalVote", getIntegerValue(proposalIndex + "__totalVote") + result)
    ]
}

@Callable(i)
func deleteVote(proposalIndex: String) = {
    strict checks = [
        lastBlock.timestamp < getIntegerValue(proposalIndex + "__end")
        getStringValue(i.caller + "__voteFor__" + proposalIndex) != 0
    ]

    [
        IntegerEntry(proposalIndex + "__totalVote", getIntegerValue(proposalIndex + "__totalVote") - getIntegerValue(i.caller + "__voteFor__" + proposalIndex))
        DeleteEntry(i.caller + "__voteFor__" + proposalIndex)
    ]

}

@Callable(i)
func changeVote(proposalIndex: String, choice: Boolean) = {
    strict checks = [
        lastBlock.timestamp < getIntegerValue(proposalIndex + "__end")
        getStringValue(i.caller + "__voteFor__" + proposalIndex) != 0
    ]
    let gwxNumber = invoke(
        gwxContractAddress,
        "calcCurrentGwxAmount",
        [i.caller],
        []
    )
    let result = if (choice) then gwxNumber else -gwxNumber
    [
        IntegerEntry(proposalIndex + "__totalVote", getIntegerValue(proposalIndex + "__totalVote") - getIntegerValue(i.caller + "__voteFor__" + proposalIndex))
        IntegerEntry(i.caller + "__voteFor__" + proposalIndex, result)
    ]
}

@Callable(i)
func getResult() = {
    [
        lastBlock.timestamp >= getIntegerValue(proposalIndex + "__end")
    ]

    [getIntegerValue(proposalIndex + "__totalVote")]
}


@Callable(i)
func setManager(pendingManagerPublicKey: String) = {
  strict checkCaller = i.mustManager()
  strict checkManagerPublicKey = pendingManagerPublicKey.fromBase58String()

  [StringEntry(keyPendingManagerPublicKey(), pendingManagerPublicKey)]
}

@Callable(i)
func confirmManager() = {
  let pm = pendingManagerPublicKeyOrUnit()
  strict hasPM = pm.isDefined() || throw("no pending manager")
  strict checkPM = i.callerPublicKey == pm.value() || throw("you are not pending manager")

  [
    StringEntry(keyManagerPublicKey(), pm.value().toBase58String()),
    DeleteEntry(keyPendingManagerPublicKey())
  ]
}

@Verifier(tx)
func verify() = {
  let targetPublicKey = match managerPublicKeyOrUnit() {
    case pk: ByteVector => pk
    case _: Unit => tx.senderPublicKey
  }
  sigVerify(tx.bodyBytes, tx.proofs[0], targetPublicKey)
}